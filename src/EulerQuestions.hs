{-# LANGUAGE NumericUnderscores #-}
{-# OPTIONS_GHC -Wno-missing-export-lists #-}

module EulerQuestions where

import Data.Function
import Debug.Trace

-- ANCHOR Q1
-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
-- Find the sum of all the multiples of 3 or 5 below 1000.
isMultipleOf :: Int -> Int -> Bool
x `isMultipleOf` y = x `rem` y == 0

-- Input 1000 ->
q1 :: Int
q1 =
  sum
    (filter (\x -> x `isMultipleOf` 3 || x `isMultipleOf` 5) [0 .. (1000 - 1)])

-- ANCHOR Q2
-- Each new term in the Fibonacci sequence is generated by adding the previous two terms.
-- By starting with 1 and 2, the first 10 terms will be:
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million,
-- find the sum of the even-valued terms.
fibSeq :: [Int]
-- Elegant recursive solution; fibSeq if f(n - 2), and (tail fibSeq) is f(n - 1). This
-- is because we are defining the recursive part starting at the 3rd element
fibSeq = 1 : 2 : zipWith (+) fibSeq (tail fibSeq)

q2 :: Int
q2 =
  fibSeq
    & takeWhile (<= 4_000_000)
    & filter even
    & sum

-- ANCHOR Q3
-- !! SKIP

-- ANCHOR Q4
-- A palindromic number reads the same both ways.
-- The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
-- Find the largest palindrome made from the product of two 3-digit numbers.
-- Note: Only works for positive numbers
reverseNumber :: Int -> Int
reverseNumber = reverseNumber' 0
  where
    reverseNumber' acc 0 = acc
    reverseNumber' acc x =
      let (d, m) = x `divMod` 10 in reverseNumber' (acc * 10 + m) d

isNumPalendromic :: Int -> Bool
isNumPalendromic n = n == reverseNumber n

-- Originally used reverseNumber to avoid converting to Lists and then reversing the list, but 
-- somehow converting to list -> reversing list was faster!!
q4 :: Int
q4 = maximum [x * y | x <- [100 .. 999], y <- [x .. 999], show (x * y) == reverse (show (x * y))]
